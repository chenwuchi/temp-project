AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  VpcCIDR:
    Description: 192.168.0.0/16
    Type: String
    Default: 192.168.0.0/16

  PublicSubnet1CIDR:
    Description: 192.168.0.0/24
    Type: String
    Default: 192.168.0.0/24

  PublicSubnet2CIDR:
    Description: 192.168.1.0/24
    Type: String
    Default: 192.168.1.0/24

  PrivateSubnet1CIDR:
    Description: 192.168.2.0/24
    Type: String
    Default: 192.168.2.0/24

  PrivateSubnet2CIDR:
    Description: 192.168.3.0/24
    Type: String
    Default: 192.168.3.0/24

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: temp-kp
    Description: temp-kp
  
  Project:
    Type: String
    Default: sample
    Description: sample

  Environment:
    Type: String
    Default: dev
    Description: dev

  # VpcId:
  #   Type: AWS::EC2::VPC::Id
  #   Default:
  #   Description:

  # SubnetId:
  #   Type: List<AWS::EC2::Subnet::Id>
  #   Default:
  #   Description:

  DesiredInstanceCount:
    Type: Number
    Default: "1"
    Description: "1"

  InstanceType:
    Type: String
    Default: t3a.micro
    Description: t3a.micro
    AllowedValues: [t2.micro, t3a.micro]
    ConstraintDescription: Please choose a valid instance type.

  ImagePath:
    Type: String
    Default: 359170549571.dkr.ecr.ap-southeast-1.amazonaws.com/sample
    Description: 359170549571.dkr.ecr.ap-southeast-1.amazonaws.com/sample

  ContainerName:
    Type: String
    Default: samplecontainer
    Description: samplecontainer

  ContainerPort:
    Type: Number
    Default: 80
    Description: 80

  DesiredTaskCount:
    Type: Number
    Default: "2"
    Description: "2"

Mappings:
  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  AWSRegionToAMI:
    ap-southeast-1:
      AMIID: ami-0b68661b29b9e058c

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: false
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref "PublicSubnet1CIDR"
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref "PublicSubnet2CIDR"
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref "PrivateSubnet1CIDR"
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref "PrivateSubnet2CIDR"
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-private-subnet-2

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref "InternetGateway"
      VpcId: !Ref "VPC"

  # Nat Gateway
  NatGateway1ElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-elastic-ip

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt "NatGateway1ElasticIP.AllocationId"
      SubnetId: !Ref "PublicSubnet1"
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-nat

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-public-route-table

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref "InternetGateway"

  PublicSubnet1Route:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      SubnetId: !Ref "PublicSubnet1"

  PublicSubnet2Route:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      SubnetId: !Ref "PublicSubnet2"

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-private-route-table

  PrivateNatRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref "PrivateRouteTable"
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref "NatGateway1"

  PrivateSubnet1Route:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref "PrivateRouteTable"
      SubnetId: !Ref "PrivateSubnet1"

  PrivateSubnet2Route:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref "PrivateRouteTable"
      SubnetId: !Ref "PrivateSubnet2"

  # Load balancer
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Project}-${Environment}-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - !Ref "PublicSubnet1"
        - !Ref "PublicSubnet2"
      SecurityGroups: [!Ref "AlbSecurityGroup"]

  # Init load balancer with blue target group
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ECSServiceRole
      - ECSBlueTG
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref "ECSBlueTG"
                Weight: 1
      LoadBalancerArn: !Ref "ECSALB"
      Port: "80"
      Protocol: HTTP

  # Init load balancer listener rule with blue target group
  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn:
      - ALBListener
      - ECSBlueTG
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref "ECSBlueTG"
                Weight: 1
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "ALBListener"
      Priority: 1

  # Target group
  ECSBlueTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub ${Project}-${Environment}-blue-tg
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref "VPC"

  # Target group
  ECSGreenTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub ${Project}-${Environment}-green-tg
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref "VPC"

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Project}-${Environment}-task-definition
      ContainerDefinitions:
        - Name: !Ref "ContainerName"
          Essential: "true"
          Image: !Ref "ImagePath"
          Memory: "200"
          MemoryReservation: "100"
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: 0
              Protocol: tcp
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskExecutionRole

  # Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Project}-${Environment}-cluster

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
      - ECSAutoScalingGroup
    Properties:
      ServiceName: !Sub ${Project}-${Environment}-ecs-service
      Cluster: !Ref "ECSCluster"
      DesiredCount: !Ref DesiredTaskCount
      DeploymentController:
        Type: CODE_DEPLOY
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref "ECSBlueTG"
      Role: !Ref "ECSServiceRole"
      TaskDefinition: !Ref "taskdefinition"

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${Project}-${Environment}-application
      ComputePlatform: ECS

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref "PublicSubnet1"
        - !Ref "PublicSubnet2"
      LaunchConfigurationName: !Ref "ContainerInstances"
      MinSize: "1"
      MaxSize: !Ref "DesiredInstanceCount"
      DesiredCapacity: !Ref "DesiredInstanceCount"

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMIID]
      SecurityGroups: [!Ref "EcsSecurityGroup"]
      InstanceType: !Ref "InstanceType"
      IamInstanceProfile: !Ref "EC2InstanceProfile"
      KeyName: !Ref "KeyName"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config;
          echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config;

  # Roles
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  [
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:RegisterTargets",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress",
                  ]
                Resource: "*"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-instance-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ]
                Resource: "*"

  ECSCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codedeploy.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  ECSCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codedeploy.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  GeneralCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser

  GeneralCodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /service-role/
      Policies:
        - PolicyName: codepipeline-service-role
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ["iam:PassRole"]
                Resource: "*"
              - Effect: Allow
                Action:
                  [
                    "codecommit:*",
                    "codedeploy:*",
                    "codebuild:*",
                    "codestar-connections:UseConnection",
                    "ecr:*",
                    "ec2:*",
                    "ecs:*",
                    "s3:*",
                    "elasticloadbalancing:*",
                    "autoscaling:*",
                    "cloudwatch:*",
                    "sns:*",
                    "cloudformation:*",
                    "opsworks:*",
                    "lambda:*",
                    "rds:*",
                    "sqs:*",
                    "devicefarm:*",
                    "servicecatalog:*",
                    "states:*",
                    "appconfig:*",
                  ]
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref "EC2Role"]

  # Security groups
  # Security Group for ALB
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Project}-${Environment}-alb-sg
      GroupDescription: ALB Security Group
      VpcId: !Ref "VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-alb-sg

  # Security Group for ECS
  EcsSecurityGroup:
    DependsOn: AlbSecurityGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Project}-${Environment}-ecs-sg
      GroupDescription: ECS Security Group
      VpcId: !Ref "VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "31000"
          ToPort: "61000"
          SourceSecurityGroupId: !Ref "AlbSecurityGroup"
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-ecs-sg

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["-", [ECSLogGroup, !Ref "AWS::StackName"]]
      RetentionInDays: 14

Outputs:
  ecsservice:
    Value: !Ref "ECSService"
  ecscluster:
    Value: !Ref "ECSCluster"
  ECSALB:
    Description: Your ALB DNS URL
    Value: !Join ["", [!GetAtt [ECSALB, DNSName]]]
  taskdef:
    Value: !Ref "taskdefinition"
